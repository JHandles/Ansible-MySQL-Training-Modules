---

#- name: Include specific training modules variable
#  include_vars: "{{training_module}}.yml"
#  when: (training_module == true)


# Cleaning server of existing database and installation

- name: Check if mysql is running
  stat: path=/var/run/mysqld/mysqld.pid
  register: service_status_mysql

- name: Stop any pre-existing mysql service
  service: name=mysqld state=stopped
  when: service_status_mysql.stat.exists
  register: service_stopped

- name: Check if mariadb is running
  stat: path=/var/run/mariadb/mariadb.pid
  register: service_status_mariadb

- name: Stop any pre-existing mariadb service
  service: name=mariadb state=stopped
  when: service_status_mariadb.stat.exists
  register: service_stopped


- name: Remove any pre-existing mysql install
  yum:
    name: mysql*
    autoremove: no
    state: absent

- name: Remove any pre-existing mariadb install
  yum:
    name: mariadb*
    autoremove: no
    state: absent

- name: Remove any pre-existing data
  file:
    path: /var/lib/mysql
    state: absent

- name: Remove pre-existing .my.cnf
  file:
    path: /root/.my.cnf
    state: absent


# Installing database

- name: install mysql repo
  yum:
    name: https://dev.mysql.com/get/mysql80-community-release-el7-2.noarch.rpm
  when: (DB_variant == "mysql")
   
- name: disable mysql current repos
  command: /usr/bin/yum-config-manager --disable mysql8*-community && /usr/bin/yum-config-manager --disable mysql5*-community  
  when: (DB_variant == "mysql")

  
- name: enable repo for desired mysql version
  command: /usr/bin/yum-config-manager --enable mysql{{MySQL_version}}-community
  when: (DB_variant == "mysql")

  
- name: install mysql server
  yum:
    name: ['mysql-community-server']
    state: latest  
  when: (DB_variant == "mysql")

- name: install mariadb server
  yum:
    name: ['mariadb-server']
    state: latest
  when: (DB_variant == "mariadb")

  
- name: remove any pre-existing or installed content in /var/lib/mysql
  file:
    path: /var/lib/mysql
    state: absent

- name: Initialize 5.6 or older
  command: mysql_install_db --user=mysql
  when: (MySQL_version == "56") or (MySQL_version == "55")

- name: native password mysql 8.0
  lineinfile:
    path: /etc/my.cnf
    line: default-authentication-plugin=mysql_native_password
    state: present
  when: (MySQL_version == "80")

- name: Initialize 5.7 and newer
  command: mysqld --initialize-insecure --user=mysql
  when: (MySQL_version == "57") or (MySQL_version == "80")

- name: start and enable mysql
  service:
    name: mysqld
    state: started
    enabled: yes
  when: (DB_variant == "mysql")

- name: start and enable mariadb
  service:
    name: mariadb
    state: started
    enabled: yes
  when: (DB_variant == "mariadb")


# generating and updating root password

- name: Generate root MySQL password
  include: root_pwgen.yml
  when: mysql_root_password == ""


- name: add root pw 5.6 or older
  command: mysqladmin -u root --skip-password password '{{ mysql_root_password }}'
  when: (MySQL_version == "56") or (MySQL_version == "55")


- name: add root pw 5.7 and newer
  command: mysql -u root --skip-password --execute "ALTER USER 'root'@'localhost' IDENTIFIED BY '{{ mysql_root_password }}';"
  when: (MySQL_version == "57") or (MySQL_version == "80")



- name: Add password.my.cnf
  include: password.my.cnf.yml


- name: Restart mysql
  service:
    name: mysqld
    state: restarted
  when: (DB_variant == "mysql")

- name: Restart mariadb
  service:
    name: mariadb
    state: restarted
  when: (DB_variant == "mariadb")


- name: Disallow remote root MySQL logins, remove anonymous users and drop test databases
  command: >
    mysql -e '
    DELETE FROM mysql.user WHERE User="root" AND Host NOT IN ("localhost", "127.0.0.1", "::1");
    DELETE FROM mysql.user WHERE User="";
    DROP DATABASE IF EXISTS test;
    DELETE FROM mysql.db WHERE DB="test" OR DB="test\\_%";
    FLUSH PRIVILEGES;
    '
  when: (MySQL_version == "56") or (MySQL_version == "55")

# password_reset training

- name: includes for password_reset training
  include: password_reset.yml
  when: (password_reset == "yes") 

# replication training

- name: includes for replication training
  includes: replication.yml
  when: (replication == "yes")





